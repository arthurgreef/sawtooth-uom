// -----------------------------------------------------------------------------
// Copyright 2018 Frank V. Castellucci
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

syntax = "proto3";
option java_package = "hashblock.ledger.protobuf";

// Value message. This is encrypted quantity on the chain see Token
message Value {

    //  Fixed width integer
    bytes value = 1;

    //  Prime # associated to unit of measure
    bytes unit = 2;

    //  Prime # associated to asset
    bytes asset = 3;
}

// Token message. A token is a representation
// of a minted quantity on the chain

message Token {

    //  Commitment 'value'
    string v_commitment = 1;
    uint64 v_pos = 2;
    string v_null = 3;

    //  Commitment 'unit'
    string u_commitment = 4;
    uint64 u_pos = 5;
    string u_null = 6;

    //  Commitment 'asset'
    string a_commitment = 7;
    uint64 a_pos = 8;
    string a_null = 9;

    //  Encrypted Quantity
    bytes quantity = 10;

}

// Data container for on-chain Minted commitments

message Wallet {
    message WalletToken {
        enum State {
            MINTED = 0;
            SPENT = 1;
        }
        uint64 id = 1;
        State state = 2;
        Token token = 3;
    }
    repeated WalletToken tokens = 1;
}

message LedgerMerkleTrie {
    bytes trie = 1;
}

// Ledger Payload

message LedgerPayload {
    // The action indicates data is contained within this payload
    enum Action {
        //
        WALLET_GENESIS = 0;
        WALLET_ADD = 1;
        WALLET_MINT_TOKEN = 2;
    }
    // The action of this payload
    Action action = 1;

    // Action = 0 - Genesis operation
    //  Create LedgerMerkleTrie txn.outputs[0] has address, data has trie
    //  Create User Wallets txn.outputs[1-n] have addresses
    //  data is starting Merkle Trie string (default is 64 '0's)

    // Action = 2 - Mint Token
    //  User wallet address in txn.outputs[0]
    //  Bytes is comma seperated value_commitment, unit commitment, asset commitment
    //  To push: bytes(','.join(list), 'utf8')
    //  To pull: data.decode('utf8').split(',') to create list

    bytes data = 2;
}


