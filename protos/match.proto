// -----------------------------------------------------------------------------
// Copyright 2018 Frank V. Castellucci and Arthur Greef
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

syntax = "proto3";
option java_multiple_files = true;
option java_package = "hashblock.match.protobuf";

// Resource quantity
message Quantity {

    //  Quantity amount? - Fixed width integer
	bytes value = 1;

    //  Prime # associated to unit
	bytes unit = 2;

    //  Prime # associated to resource
	bytes resource = 3;
}

// Quantity ratio data for matching equation
message Ratio {

    //  Transaction quantity of unit and resource
    Quantity numerator = 1;

    //  Transaction quantity of unit and resource
    Quantity denominator = 2;
}

//  Initiating data elements
message UTXQ {
    //  Key for initiator (who am I)
    bytes plus = 1;
    //  Keys for reciprocator (who am I 'asking' for example)
    bytes minus = 2;
    //  Transaction quantity structure
    Quantity quantity = 3;
    //  State flag for reciprocate validity 0.1.0 only
    bool matched = 4;
}

//  Reciprocating data elements
message MTXQ {
    //  Key for reciprocator (who am I)
    bytes plus = 1;
    //  Key for initiator (who 'asked' for example)
    bytes minus = 2;
    //  Contains numerator and denominator for match equation
    Ratio ratio = 3;
    //  Transaction quantity structure
    Quantity quantity = 4;
    //  For 0.1.0 this had the content of the initiating (UTXQ)
    //  When the MTXQ is saved
    //  For 0.2.0 this is deprecated and not used
    UTXQ unmatched = 5;
    //  For 0.2.0 this contains the address (same as ukey)
    //  that refers to the matched initiate
    bytes utxq_addr = 6;
}

message MatchEvent {
    enum Action {
        UTXQ_ASK = 0;
        MTXQ_TELL = 1;
        UTXQ_OFFER = 2;
        MTXQ_ACCEPT = 3;
        UTXQ_COMMITMENT = 4;
        MTXQ_OBLIGATION = 5;
        UTXQ_GIVE = 6;
        MTXQ_TAKE = 7;
    }

    //  See enum above
    Action action = 1;

    //  The initiate event key
    //  If this is 0.1.0 and an initiate based txn then
    //  this is the old address and the data is serialized protobuf
    //  If this is 0.2.0 and initiate based txn then
    //  this is the new address scheme for unmatched initiate and the
    //  data is an encrypted blob of UTXQ that should be stored at this address
    //  If this is 0.2.0 and reciprocate based txn then
    //  the auxdata below (new) is the encrypted block of matching UTXQ
    string ukey = 2;

    //  The reciprocate event key
    //  If this is 0.1.0 and an initiate based txn then
    //  this is the old address and the data is serialized protobuf
    //  If this is 0.2.0 and initiate based txn then
    //  this is the new address scheme for unmatched initiate and the
    //  data is an encrypted blob of MTXQ that should be stored at this address
    string mkey = 3;

    // The content of this payload (protobuffed or encrypted blob)
    bytes mdata = 4;

    // New in 0.2.0: The encrypted blob of the matched UTXQ
    // if we are processing MTXQ Actions
    // This blob is set to merkle once verified
    bytes udata = 5;

    // New in 0.2.0: The encrypted blob of the matched UTXQ
    // if we are processing MTXQ Actions
    bytes pairings = 6;

    //  New in 0.2.0 and usable by 0.1.0 as well:
    //  This is the 'proof' to use in verifying matching equation
    bytes proof = 7;
}
