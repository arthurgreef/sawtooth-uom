#!/bin/bash
#
# Copyright 2017 Frank V. Castellucci and Arthur Greef
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# Exit on non-zero exit code from subcommand
set -e

# Default args
TARGETS="python"
EXCLUDE=""

MOUNTED="mounted"
INSTALLED="installed"

usage() {
    echo "Usage:"
    echo "  $0 {$MOUNTED,$INSTALLED,$DEBS}"
    echo
    echo "Options:"
    echo "  -h                 print usage and exit"
    echo "  -t Target          only build the specified target(s)"
    echo ""
    echo "Build type options: {$MOUNTED,$INSTALLED,$DEBS}"
    echo "  $MOUNTED - build development docker images that mount hashblock"
    echo "      from your file system"
    echo "  $INSTALLED - build production docker images with the hashblock "
    echo "      modules installed in them."
}

info() {
    echo -e "\033[0;36m\n[--- $1 ---]\n\033[0m"
}

warn() {
    echo -e "\033[0;31m\n[--- $1 ---]\n\033[0m"
}

while getopts :x:t:l:h opt
do
    case $opt in
        h)
            usage
            exit 0
            ;;
        t)
            TARGETS="$TARGETS $OPTARG"
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            usage
            exit 1
            ;;
    esac
done
shift $(($OPTIND-1))

if [[ -z $1 ]]
then
    BUILD_MODE=$MOUNTED
else
    if [[ $1 == $MOUNTED || $1 == $INSTALLED ]]
    then
        BUILD_MODE=$1
    else
        echo "Invalid positional argument: $1"
        usage
        exit 1
    fi
fi

protos() {
    echo -e "\033[0;32m--- Running protogen ---\n\033[0m"
    $top_dir/bin/protogen
}

main() {

    info "Build mode: $BUILD_MODE"

    # Set sawtooth-core project directory relative to this file
    top_dir=$(cd $(dirname $(dirname $0)) && pwd)
    protos
    # Start in project directory
    cd $top_dir

    for language in $TARGETS
    do

        # Check if we are skipping this module
        skip=0
        for exclude in $EXCLUDE
        do
            if [[ $language == $exclude ]]
            then
                skip=1
                break
            fi
        done

        if [[ $skip == 1 ]]
        then
            info "Skipping $language"
        else
            info "Building $language"
            case $language in
                python)
                    build_python
                    ;;
                *)
                    warn "Module '$language' not found."
                    ;;
            esac
        fi
    done
}

docker_build() {
    image=$1
    context=$2
    tag=$3

    if [ ! -z $ISOLATION_ID ]
    then
        tag=$tag:$ISOLATION_ID
    fi

    info "Building $tag from $image in context $context"

    # Build the image and pass in any proxy information if set
    docker build -f $image -t $tag $context \
        --build-arg https_proxy=$https_proxy \
        --build-arg http_proxy=$http_proxy \
        --build-arg HTTPS_PROXY=$HTTPS_PROXY \
        --build-arg HTTP_PROXY=$HTTP_PROXY
}

if [[ $BUILD_MODE == $MOUNTED ]]
then
    build_python() {
        docker_build $top_dir/docker/hashblock-python-testing $top_dir hashblock-python-testing
        docker_build $top_dir/docker/hashblock-dev-generic-tp $top_dir hashblock-dev-generic-tp
        docker_build $top_dir/docker/hashblock-dev-rest $top_dir hashblock-dev-rest
        docker_build $top_dir/docker/hashblock-dev-admin $top_dir hashblock-dev-admin
    }
fi

if [[ $BUILD_MODE == $INSTALLED ]]
then
    build_python() {
        echo "Please using 'bin/build_distro' for time being"
    }
fi

main
